// Generated by Haxe 3.4.7
(function ($global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var haxe_Main = function() { };
haxe_Main.__name__ = true;
haxe_Main.main = function() {
	var txt = window.document.getElementById("txt");
	txt.innerHTML = "sss";
	var r = new XMLHttpRequest();
	r.onload = function(x) {
		var buf = r.response;
		txt.innerHTML = "received " + buf.byteLength;
		var btn = window.document.getElementById("btn");
		btn.onclick = function(e) {
			var bytes = new Uint8Array(buf,4);
			var sp = new haxe_ScreenPressor(960,540);
			var dst = new Int32Array(518400);
			var inp = window.document.getElementById("N");
			var N = Std.parseInt(inp.value);
			if(N < 0 || N > 1000) {
				txt.innerHTML = "You must be joking!";
				return;
			}
			txt.innerHTML = "Decompressing " + N + " times...";
			haxe_Main.clearImg();
			haxe_Timer.delay(function() {
				var t0 = new Date().getTime() / 1000;
				var _g1 = 0;
				var _g = N;
				while(_g1 < _g) {
					var n = _g1++;
					sp.DecompressI(bytes,dst);
				}
				var t1 = new Date().getTime() / 1000;
				txt.innerHTML += " t=" + (t1 - t0);
				haxe_Main.showImg(dst);
			},20);
		};
	};
	r.open("GET","blow.spi",true);
	r.responseType = "arraybuffer";
	r.send();
};
haxe_Main.clearImg = function() {
	var m = window.document.getElementById("main");
	while(m.lastChild != null) m.removeChild(m.lastChild);
};
haxe_Main.showImg = function(pic) {
	var m = window.document.getElementById("main");
	var c = window.document.createElement("canvas");
	c.width = 960;
	c.height = 540;
	m.appendChild(c);
	var imagedata = c.getContext("2d",null).getImageData(0,0,960,540);
	var data = imagedata.data;
	var picbytes = new Uint8Array(pic.buffer);
	var _g1 = 0;
	var _g = 518400;
	while(_g1 < _g) {
		var i = _g1++;
		data[i * 4] = picbytes[i * 4];
		data[i * 4 + 1] = picbytes[i * 4 + 1];
		data[i * 4 + 2] = picbytes[i * 4 + 2];
		data[i * 4 + 3] = 255;
	}
	c.getContext("2d",null).putImageData(imagedata,0,0);
};
var haxe_RangeCoder = function() {
};
haxe_RangeCoder.__name__ = true;
haxe_RangeCoder.prototype = {
	DecodeBegin: function(src,pos0) {
		this.code = 0;
		var ff = 65535;
		this.range = ff * 65536;
		this.range += ff;
		this.data = src;
		this.pos = pos0;
		this.code = 0;
		this.code = this.code * 256 + this.data[this.pos + 1];
		this.code = this.code * 256 + this.data[this.pos + 2];
		this.code = this.code * 256 + this.data[this.pos + 3];
		this.code = this.code * 256 + this.data[this.pos + 4];
		this.pos += 5;
	}
	,__class__: haxe_RangeCoder
};
var haxe_ScreenPressor = function(width,height) {
	this.X = width;
	this.Y = height;
	this.rc = new haxe_RangeCoder();
	this.cntab = new Uint32Array(3354624);
	this.ptypetab = [];
	this.ntab = [];
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		this.ptypetab[i] = new Uint32Array(7);
		this.ntab[i] = new Uint32Array(257);
	}
	var _g1 = 0;
	while(_g1 < 3) {
		var chan = _g1++;
		var _g11 = 0;
		while(_g11 < 4096) {
			var ctx = _g11++;
			this.cntab[((chan << 12) + ctx) * 273 + 16] = 0;
		}
	}
};
haxe_ScreenPressor.__name__ = true;
haxe_ScreenPressor.prototype = {
	ReinitTabs: function() {
		var _g = 0;
		while(_g < 3) {
			var chan = _g++;
			var _g1 = 0;
			while(_g1 < 4096) {
				var ctx = _g1++;
				var p = ((chan << 12) + ctx) * 273;
				if(this.cntab[p + 16] != 256) {
					var _g2 = 0;
					while(_g2 < 256) {
						var i = _g2++;
						this.cntab[p + i + 17] = 1;
					}
					var _g21 = 0;
					while(_g21 < 16) {
						var i1 = _g21++;
						this.cntab[p + i1] = 16;
					}
					this.cntab[p + 16] = 256;
				}
			}
		}
		var _g3 = 0;
		while(_g3 < 6) {
			var ncx = _g3++;
			var p1 = this.ntab[ncx];
			var _g11 = 0;
			while(_g11 < 256) {
				var i2 = _g11++;
				p1[i2] = 1;
			}
			p1[256] = 256;
		}
		var _g4 = 0;
		while(_g4 < 6) {
			var ctx1 = _g4++;
			var p2 = this.ptypetab[ctx1];
			var _g12 = 0;
			while(_g12 < 6) {
				var i3 = _g12++;
				p2[i3] = 1;
			}
			p2[6] = 6;
		}
	}
	,DecompressI: function(src,dst) {
		var end = this.X * this.Y;
		var di = 0;
		var clr = 0;
		var cx = 0;
		var cx1 = 0;
		var lasti = 0;
		if(src[0] != 18) {
			console.log("unknown version of the codec");
			return;
		}
		this.ReinitTabs();
		this.rc.DecodeBegin(src,1);
		var k = 0;
		while(k < this.X + 1) {
			var _this = this.rc;
			var cnt = this.cntab;
			var off = (cx + cx1) * 273;
			var totfr = cnt[off + 16];
			_this.range = _this.range / totfr | 0;
			var value = _this.code / _this.range | 0;
			var x = 0;
			var cumfr = 0;
			var cnt_x = 0;
			while(x < 16) {
				cnt_x = cnt[off + x];
				if(value >= cumfr + cnt_x) {
					cumfr += cnt_x;
				} else {
					break;
				}
				++x;
			}
			var c = x * 16;
			var cnt_c = 0;
			while(c < 256) {
				cnt_c = cnt[off + c + 17];
				if(value >= cumfr + cnt_c) {
					cumfr += cnt_c;
				} else {
					break;
				}
				++c;
			}
			_this.code -= cumfr * _this.range;
			_this.range *= cnt_c;
			while(_this.range < 16777216) {
				_this.code = _this.code * 256 + _this.data[_this.pos++];
				_this.range *= 256;
			}
			cnt[off + c + 17] = cnt_c + 400;
			cnt[off + x] = cnt_x + 400;
			totfr += 400;
			if(totfr > 65536) {
				totfr = 0;
				var _g1 = off + 17;
				var _g = off + 256 + 17;
				while(_g1 < _g) {
					var i = _g1++;
					var nc = (cnt[i] >> 1) + 1;
					cnt[i] = nc;
					totfr += nc;
				}
				var _g2 = 0;
				while(_g2 < 16) {
					var i1 = _g2++;
					var sum = 0;
					var i16_17 = off + (i1 << 4) + 17;
					var _g11 = 0;
					while(_g11 < 16) {
						var j = _g11++;
						sum += cnt[i16_17 + j];
					}
					cnt[off + i1] = sum;
				}
			}
			cnt[off + 16] = totfr;
			var r = c;
			cx1 = cx << 6 & 4032;
			cx = r >> 2;
			var _this1 = this.rc;
			var cnt1 = this.cntab;
			var off1 = (4096 + cx + cx1) * 273;
			var totfr1 = cnt1[off1 + 16];
			_this1.range = _this1.range / totfr1 | 0;
			var value1 = _this1.code / _this1.range | 0;
			var x1 = 0;
			var cumfr1 = 0;
			var cnt_x1 = 0;
			while(x1 < 16) {
				cnt_x1 = cnt1[off1 + x1];
				if(value1 >= cumfr1 + cnt_x1) {
					cumfr1 += cnt_x1;
				} else {
					break;
				}
				++x1;
			}
			var c1 = x1 * 16;
			var cnt_c1 = 0;
			while(c1 < 256) {
				cnt_c1 = cnt1[off1 + c1 + 17];
				if(value1 >= cumfr1 + cnt_c1) {
					cumfr1 += cnt_c1;
				} else {
					break;
				}
				++c1;
			}
			_this1.code -= cumfr1 * _this1.range;
			_this1.range *= cnt_c1;
			while(_this1.range < 16777216) {
				_this1.code = _this1.code * 256 + _this1.data[_this1.pos++];
				_this1.range *= 256;
			}
			cnt1[off1 + c1 + 17] = cnt_c1 + 400;
			cnt1[off1 + x1] = cnt_x1 + 400;
			totfr1 += 400;
			if(totfr1 > 65536) {
				totfr1 = 0;
				var _g12 = off1 + 17;
				var _g3 = off1 + 256 + 17;
				while(_g12 < _g3) {
					var i2 = _g12++;
					var nc1 = (cnt1[i2] >> 1) + 1;
					cnt1[i2] = nc1;
					totfr1 += nc1;
				}
				var _g4 = 0;
				while(_g4 < 16) {
					var i3 = _g4++;
					var sum1 = 0;
					var i16_171 = off1 + (i3 << 4) + 17;
					var _g13 = 0;
					while(_g13 < 16) {
						var j1 = _g13++;
						sum1 += cnt1[i16_171 + j1];
					}
					cnt1[off1 + i3] = sum1;
				}
			}
			cnt1[off1 + 16] = totfr1;
			var g = c1;
			cx1 = cx << 6 & 4032;
			cx = g >> 2;
			var _this2 = this.rc;
			var cnt2 = this.cntab;
			var off2 = (8192 + cx + cx1) * 273;
			var totfr2 = cnt2[off2 + 16];
			_this2.range = _this2.range / totfr2 | 0;
			var value2 = _this2.code / _this2.range | 0;
			var x2 = 0;
			var cumfr2 = 0;
			var cnt_x2 = 0;
			while(x2 < 16) {
				cnt_x2 = cnt2[off2 + x2];
				if(value2 >= cumfr2 + cnt_x2) {
					cumfr2 += cnt_x2;
				} else {
					break;
				}
				++x2;
			}
			var c2 = x2 * 16;
			var cnt_c2 = 0;
			while(c2 < 256) {
				cnt_c2 = cnt2[off2 + c2 + 17];
				if(value2 >= cumfr2 + cnt_c2) {
					cumfr2 += cnt_c2;
				} else {
					break;
				}
				++c2;
			}
			_this2.code -= cumfr2 * _this2.range;
			_this2.range *= cnt_c2;
			while(_this2.range < 16777216) {
				_this2.code = _this2.code * 256 + _this2.data[_this2.pos++];
				_this2.range *= 256;
			}
			cnt2[off2 + c2 + 17] = cnt_c2 + 400;
			cnt2[off2 + x2] = cnt_x2 + 400;
			totfr2 += 400;
			if(totfr2 > 65536) {
				totfr2 = 0;
				var _g14 = off2 + 17;
				var _g5 = off2 + 256 + 17;
				while(_g14 < _g5) {
					var i4 = _g14++;
					var nc2 = (cnt2[i4] >> 1) + 1;
					cnt2[i4] = nc2;
					totfr2 += nc2;
				}
				var _g6 = 0;
				while(_g6 < 16) {
					var i5 = _g6++;
					var sum2 = 0;
					var i16_172 = off2 + (i5 << 4) + 17;
					var _g15 = 0;
					while(_g15 < 16) {
						var j2 = _g15++;
						sum2 += cnt2[i16_172 + j2];
					}
					cnt2[off2 + i5] = sum2;
				}
			}
			cnt2[off2 + 16] = totfr2;
			var b = c2;
			cx1 = cx << 6 & 4032;
			cx = b >> 2;
			var _this3 = this.rc;
			var cnt3 = this.ntab[0];
			var totfr3 = cnt3[256];
			_this3.range = _this3.range / totfr3 | 0;
			var value3 = _this3.code / _this3.range | 0;
			var c3 = 0;
			var cumfr3 = 0;
			var cnt_c3 = 0;
			while(c3 < 256) {
				cnt_c3 = cnt3[c3];
				if(value3 >= cumfr3 + cnt_c3) {
					cumfr3 += cnt_c3;
				} else {
					break;
				}
				++c3;
			}
			_this3.code -= cumfr3 * _this3.range;
			_this3.range *= cnt_c3;
			while(_this3.range < 16777216) {
				_this3.code = _this3.code * 256 + _this3.data[_this3.pos++];
				_this3.range *= 256;
			}
			cnt3[c3] = cnt_c3 + 400;
			totfr3 += 400;
			if(totfr3 > 65536) {
				totfr3 = 0;
				var _g16 = 0;
				var _g7 = 256;
				while(_g16 < _g7) {
					var i6 = _g16++;
					var nc3 = (cnt3[i6] >> 1) + 1;
					cnt3[i6] = nc3;
					totfr3 += nc3;
				}
			}
			cnt3[256] = totfr3;
			var n = c3;
			clr = (b << 16) + (g << 8) + r;
			k += n;
			while(n-- > 0) {
				dst[di] = clr;
				++di;
			}
			lasti = di - 1;
		}
		var off3 = -this.X - 1;
		var ptype = 0;
		var dstbytes = new Uint8Array(dst.buffer);
		while(di < end) {
			var _this4 = this.rc;
			var cnt4 = this.ptypetab[ptype];
			var totfr4 = cnt4[6];
			_this4.range = _this4.range / totfr4 | 0;
			var value4 = _this4.code / _this4.range | 0;
			var c4 = 0;
			var cumfr4 = 0;
			var cnt_c4 = 0;
			while(c4 < 6) {
				cnt_c4 = cnt4[c4];
				if(value4 >= cumfr4 + cnt_c4) {
					cumfr4 += cnt_c4;
				} else {
					break;
				}
				++c4;
			}
			_this4.code -= cumfr4 * _this4.range;
			_this4.range *= cnt_c4;
			while(_this4.range < 16777216) {
				_this4.code = _this4.code * 256 + _this4.data[_this4.pos++];
				_this4.range *= 256;
			}
			cnt4[c4] = cnt_c4 + 1000;
			totfr4 += 1000;
			if(totfr4 > 65536) {
				totfr4 = 0;
				var _g17 = 0;
				var _g8 = 6;
				while(_g17 < _g8) {
					var i7 = _g17++;
					var nc4 = (cnt4[i7] >> 1) + 1;
					cnt4[i7] = nc4;
					totfr4 += nc4;
				}
			}
			cnt4[6] = totfr4;
			ptype = c4;
			if(ptype == 0) {
				var _this5 = this.rc;
				var cnt5 = this.cntab;
				var off4 = (cx + cx1) * 273;
				var totfr5 = cnt5[off4 + 16];
				_this5.range = _this5.range / totfr5 | 0;
				var value5 = _this5.code / _this5.range | 0;
				var x3 = 0;
				var cumfr5 = 0;
				var cnt_x3 = 0;
				while(x3 < 16) {
					cnt_x3 = cnt5[off4 + x3];
					if(value5 >= cumfr5 + cnt_x3) {
						cumfr5 += cnt_x3;
					} else {
						break;
					}
					++x3;
				}
				var c5 = x3 * 16;
				var cnt_c5 = 0;
				while(c5 < 256) {
					cnt_c5 = cnt5[off4 + c5 + 17];
					if(value5 >= cumfr5 + cnt_c5) {
						cumfr5 += cnt_c5;
					} else {
						break;
					}
					++c5;
				}
				_this5.code -= cumfr5 * _this5.range;
				_this5.range *= cnt_c5;
				while(_this5.range < 16777216) {
					_this5.code = _this5.code * 256 + _this5.data[_this5.pos++];
					_this5.range *= 256;
				}
				cnt5[off4 + c5 + 17] = cnt_c5 + 400;
				cnt5[off4 + x3] = cnt_x3 + 400;
				totfr5 += 400;
				if(totfr5 > 65536) {
					totfr5 = 0;
					var _g18 = off4 + 17;
					var _g9 = off4 + 256 + 17;
					while(_g18 < _g9) {
						var i8 = _g18++;
						var nc5 = (cnt5[i8] >> 1) + 1;
						cnt5[i8] = nc5;
						totfr5 += nc5;
					}
					var _g10 = 0;
					while(_g10 < 16) {
						var i9 = _g10++;
						var sum3 = 0;
						var i16_173 = off4 + (i9 << 4) + 17;
						var _g19 = 0;
						while(_g19 < 16) {
							var j3 = _g19++;
							sum3 += cnt5[i16_173 + j3];
						}
						cnt5[off4 + i9] = sum3;
					}
				}
				cnt5[off4 + 16] = totfr5;
				var r1 = c5;
				cx1 = cx << 6 & 4032;
				cx = r1 >> 2;
				var _this6 = this.rc;
				var cnt6 = this.cntab;
				var off5 = (4096 + cx + cx1) * 273;
				var totfr6 = cnt6[off5 + 16];
				_this6.range = _this6.range / totfr6 | 0;
				var value6 = _this6.code / _this6.range | 0;
				var x4 = 0;
				var cumfr6 = 0;
				var cnt_x4 = 0;
				while(x4 < 16) {
					cnt_x4 = cnt6[off5 + x4];
					if(value6 >= cumfr6 + cnt_x4) {
						cumfr6 += cnt_x4;
					} else {
						break;
					}
					++x4;
				}
				var c6 = x4 * 16;
				var cnt_c6 = 0;
				while(c6 < 256) {
					cnt_c6 = cnt6[off5 + c6 + 17];
					if(value6 >= cumfr6 + cnt_c6) {
						cumfr6 += cnt_c6;
					} else {
						break;
					}
					++c6;
				}
				_this6.code -= cumfr6 * _this6.range;
				_this6.range *= cnt_c6;
				while(_this6.range < 16777216) {
					_this6.code = _this6.code * 256 + _this6.data[_this6.pos++];
					_this6.range *= 256;
				}
				cnt6[off5 + c6 + 17] = cnt_c6 + 400;
				cnt6[off5 + x4] = cnt_x4 + 400;
				totfr6 += 400;
				if(totfr6 > 65536) {
					totfr6 = 0;
					var _g110 = off5 + 17;
					var _g20 = off5 + 256 + 17;
					while(_g110 < _g20) {
						var i10 = _g110++;
						var nc6 = (cnt6[i10] >> 1) + 1;
						cnt6[i10] = nc6;
						totfr6 += nc6;
					}
					var _g21 = 0;
					while(_g21 < 16) {
						var i11 = _g21++;
						var sum4 = 0;
						var i16_174 = off5 + (i11 << 4) + 17;
						var _g111 = 0;
						while(_g111 < 16) {
							var j4 = _g111++;
							sum4 += cnt6[i16_174 + j4];
						}
						cnt6[off5 + i11] = sum4;
					}
				}
				cnt6[off5 + 16] = totfr6;
				var g1 = c6;
				cx1 = cx << 6 & 4032;
				cx = g1 >> 2;
				var _this7 = this.rc;
				var cnt7 = this.cntab;
				var off6 = (8192 + cx + cx1) * 273;
				var totfr7 = cnt7[off6 + 16];
				_this7.range = _this7.range / totfr7 | 0;
				var value7 = _this7.code / _this7.range | 0;
				var x5 = 0;
				var cumfr7 = 0;
				var cnt_x5 = 0;
				while(x5 < 16) {
					cnt_x5 = cnt7[off6 + x5];
					if(value7 >= cumfr7 + cnt_x5) {
						cumfr7 += cnt_x5;
					} else {
						break;
					}
					++x5;
				}
				var c7 = x5 * 16;
				var cnt_c7 = 0;
				while(c7 < 256) {
					cnt_c7 = cnt7[off6 + c7 + 17];
					if(value7 >= cumfr7 + cnt_c7) {
						cumfr7 += cnt_c7;
					} else {
						break;
					}
					++c7;
				}
				_this7.code -= cumfr7 * _this7.range;
				_this7.range *= cnt_c7;
				while(_this7.range < 16777216) {
					_this7.code = _this7.code * 256 + _this7.data[_this7.pos++];
					_this7.range *= 256;
				}
				cnt7[off6 + c7 + 17] = cnt_c7 + 400;
				cnt7[off6 + x5] = cnt_x5 + 400;
				totfr7 += 400;
				if(totfr7 > 65536) {
					totfr7 = 0;
					var _g112 = off6 + 17;
					var _g22 = off6 + 256 + 17;
					while(_g112 < _g22) {
						var i12 = _g112++;
						var nc7 = (cnt7[i12] >> 1) + 1;
						cnt7[i12] = nc7;
						totfr7 += nc7;
					}
					var _g23 = 0;
					while(_g23 < 16) {
						var i13 = _g23++;
						var sum5 = 0;
						var i16_175 = off6 + (i13 << 4) + 17;
						var _g113 = 0;
						while(_g113 < 16) {
							var j5 = _g113++;
							sum5 += cnt7[i16_175 + j5];
						}
						cnt7[off6 + i13] = sum5;
					}
				}
				cnt7[off6 + 16] = totfr7;
				var b1 = c7;
				cx1 = cx << 6 & 4032;
				cx = b1 >> 2;
				clr = (b1 << 16) + (g1 << 8) + r1;
			}
			var _this8 = this.rc;
			var cnt8 = this.ntab[ptype];
			var totfr8 = cnt8[256];
			_this8.range = _this8.range / totfr8 | 0;
			var value8 = _this8.code / _this8.range | 0;
			var c8 = 0;
			var cumfr8 = 0;
			var cnt_c8 = 0;
			while(c8 < 256) {
				cnt_c8 = cnt8[c8];
				if(value8 >= cumfr8 + cnt_c8) {
					cumfr8 += cnt_c8;
				} else {
					break;
				}
				++c8;
			}
			_this8.code -= cumfr8 * _this8.range;
			_this8.range *= cnt_c8;
			while(_this8.range < 16777216) {
				_this8.code = _this8.code * 256 + _this8.data[_this8.pos++];
				_this8.range *= 256;
			}
			cnt8[c8] = cnt_c8 + 400;
			totfr8 += 400;
			if(totfr8 > 65536) {
				totfr8 = 0;
				var _g114 = 0;
				var _g24 = 256;
				while(_g114 < _g24) {
					var i14 = _g114++;
					var nc8 = (cnt8[i14] >> 1) + 1;
					cnt8[i14] = nc8;
					totfr8 += nc8;
				}
			}
			cnt8[256] = totfr8;
			var n1 = c8;
			switch(ptype) {
			case 0:
				while(n1-- > 0) dst[di++] = clr;
				lasti = di - 1;
				break;
			case 1:
				while(n1-- > 0) {
					dst[di] = dst[lasti];
					lasti = di;
					++di;
				}
				clr = dst[lasti];
				break;
			case 2:
				while(n1-- > 0) {
					clr = dst[di + off3 + 1];
					dst[di] = clr;
					++di;
				}
				lasti = di - 1;
				break;
			case 4:
				while(n1-- > 0) {
					var r2 = dstbytes[lasti * 4] + dstbytes[(di + off3) * 4 + 4] - dstbytes[(di + off3) * 4];
					var g2 = dstbytes[lasti * 4 + 1] + dstbytes[(di + off3) * 4 + 5] - dstbytes[(di + off3) * 4 + 1];
					var b2 = dstbytes[lasti * 4 + 2] + dstbytes[(di + off3) * 4 + 6] - dstbytes[(di + off3) * 4 + 2];
					clr = ((b2 & 255) << 16) + ((g2 & 255) << 8) + (r2 & 255);
					dst[di] = clr;
					lasti = di;
					++di;
				}
				break;
			case 5:
				while(n1-- > 0) {
					clr = dst[di + off3];
					dst[di] = clr;
					++di;
				}
				lasti = di - 1;
				break;
			}
			cx1 = (clr & 64512) >> 4;
			cx = clr >> 18;
		}
	}
	,__class__: haxe_ScreenPressor
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
haxe_Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
